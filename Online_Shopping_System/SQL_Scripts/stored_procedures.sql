-- 1. List all available products in stock
DELIMITER //
CREATE PROCEDURE ListAvailableProducts()
BEGIN
    SELECT * FROM Products WHERE Stock > 0;
END //
DELIMITER ;

-- 2. Retrieve purchase history of a specific customer
DELIMITER //
CREATE PROCEDURE GetCustomerPurchaseHistory(IN p_CustomerID INT)
BEGIN
    SELECT o.OrderID, p.Name AS ProductName, o.OrderDate, o.Quantity, p.Price, (o.Quantity * p.Price) AS TotalCost
    FROM Orders o
    JOIN Products p ON o.ProductID = p.ProductID
    WHERE o.CustomerID = p_CustomerID
    ORDER BY o.OrderDate DESC;
END //
DELIMITER ;

-- 3. Find the most purchased product
DELIMITER //
CREATE PROCEDURE GetMostPurchasedProduct()
BEGIN
    SELECT p.ProductID, p.Name, SUM(o.Quantity) AS TotalPurchased
    FROM Orders o
    JOIN Products p ON o.ProductID = p.ProductID
    GROUP BY p.ProductID, p.Name
    ORDER BY TotalPurchased DESC
    LIMIT 1;
END //
DELIMITER ;



-- 5. Delete customer records
DELIMITER //
CREATE PROCEDURE DeleteCustomer(IN p_CustomerID INT)
BEGIN
    DELETE FROM Customers WHERE CustomerID = p_CustomerID;
END //
DELIMITER ;

-- 6. Generate a sales report
DELIMITER //
CREATE PROCEDURE GenerateSalesReport()
BEGIN
    SELECT o.OrderID, c.Name AS CustomerName, p.Name AS ProductName, o.OrderDate, o.Quantity, p.Price, (o.Quantity * p.Price) AS TotalCost
    FROM Orders o
    JOIN Customers c ON o.CustomerID = c.CustomerID
    JOIN Products p ON o.ProductID = p.ProductID
    ORDER BY o.OrderDate DESC;
END //
DELIMITER ;

-- 7. Retrieve customers who placed orders in the last 3 months
DELIMITER //
CREATE PROCEDURE GetRecentCustomers()
BEGIN
    SELECT DISTINCT c.CustomerID, c.Name, c.Email
    FROM Customers c
    JOIN Orders o ON c.CustomerID = o.CustomerID
    WHERE o.OrderDate >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);
END //
DELIMITER ;

-- 8. Find the total revenue generated by each category
DELIMITER //
CREATE PROCEDURE GetTotalRevenueByCategory()
BEGIN
    SELECT p.CategoryID, SUM(o.Quantity * p.Price) AS TotalRevenue
    FROM Orders o
    JOIN Products p ON o.ProductID = p.ProductID
    GROUP BY p.CategoryID;
END //
DELIMITER ;

-- 9. Retrieve the top 5 customers with the highest total purchase value
DELIMITER //
CREATE PROCEDURE GetTop5Customers()
BEGIN
    SELECT c.CustomerID, c.Name, SUM(o.Quantity * p.Price) AS TotalSpent
    FROM Orders o
    JOIN Customers c ON o.CustomerID = c.CustomerID
    JOIN Products p ON o.ProductID = p.ProductID
    GROUP BY c.CustomerID, c.Name
    ORDER BY TotalSpent DESC
    LIMIT 5;
END //
DELIMITER ;

-- 10. List products that are out of stock
DELIMITER //
CREATE PROCEDURE GetOutOfStockProducts()
BEGIN
    SELECT * FROM Products WHERE Stock = 0;
END //
DELIMITER ;

-- 11. Find the most frequently bought product category
DELIMITER //
CREATE PROCEDURE GetMostFrequentCategory()
BEGIN
    SELECT p.CategoryID, COUNT(o.OrderID) AS TotalOrders
    FROM Orders o
    JOIN Products p ON o.ProductID = p.ProductID
    GROUP BY p.CategoryID
    ORDER BY TotalOrders DESC
    LIMIT 1;
END //
DELIMITER ;

-- 12. Retrieve orders placed during a specific month
DELIMITER //
CREATE PROCEDURE GetOrdersByMonth(IN p_Year INT, IN p_Month INT)
BEGIN
    SELECT * FROM Orders WHERE YEAR(OrderDate) = p_Year AND MONTH(OrderDate) = p_Month;
END //
DELIMITER ;

-- 13. Find the average order value per customer
DELIMITER //
CREATE PROCEDURE GetAverageOrderValue()
BEGIN
    SELECT c.CustomerID, c.Name, AVG(o.Quantity * p.Price) AS AvgOrderValue
    FROM Orders o
    JOIN Customers c ON o.CustomerID = c.CustomerID
    JOIN Products p ON o.ProductID = p.ProductID
    GROUP BY c.CustomerID, c.Name
    ORDER BY AvgOrderValue DESC;
END //
DELIMITER ;

-- 14. Retrieve all orders with more than 5 items
DELIMITER //
CREATE PROCEDURE GetLargeOrders()
BEGIN
    SELECT * FROM Orders WHERE Quantity > 5;
END //
DELIMITER ;

-- 15. Find customers who have never placed an order
DELIMITER //
CREATE PROCEDURE GetCustomersWithoutOrders()
BEGIN
    SELECT * FROM Customers WHERE CustomerID NOT IN (SELECT DISTINCT CustomerID FROM Orders);
END //
DELIMITER ;

-- 16. Retrieve orders sorted by highest total value
DELIMITER //
CREATE PROCEDURE GetOrdersByTotalValue()
BEGIN
    SELECT o.OrderID, c.Name AS CustomerName, SUM(o.Quantity * p.Price) AS TotalValue
    FROM Orders o
    JOIN Customers c ON o.CustomerID = c.CustomerID
    JOIN Products p ON o.ProductID = p.ProductID
    GROUP BY o.OrderID, c.Name
    ORDER BY TotalValue DESC;
END //
DELIMITER ;
